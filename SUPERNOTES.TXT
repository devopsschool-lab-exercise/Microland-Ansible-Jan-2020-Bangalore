Why we need Ansible?
======================
        
        Server(S) Congig mgt.
                Manage devices
        Agent less**
        Orch
============================

What is Ansible?
=========================
    Config mgt tool.
    From REDHAT
    Release
        Ansible - CMD - OPEN SOURCE - FREE
        Ansible Tower = Ansible + GUI - PAID
    PYTHON
    2.9
    Agent Less *****




What is Config mgt?
=========================
Server(S) Config mgt.

What is there in Server of which we do Config mgt?
==========================
HARDWARE
    HYPERVISOR
                ANSIBLE
        storage 
        ram 
        cpu
software
    network
    os
    firewall
    services
    software
    file
    directory
    package
    services
    ups
    bash
    ps
    yum
    apt
    nuget
    choc
PEOPLE
    users
    groups
PROCESS
    policy


WHY ANSIBLE??????
=======================
Prod - MicroX
mgr - MgrX
----------------
Architect -> MSProj - TFS - Trello - JIRA - Sharepoint - Wiki - Confluence
Dev - 10 FEA - 10 DEV 
    Code Integ -> GIT
    Code Ana 
            Peer  - Gerrit
            Static - SonarQube
    Build mgt - MSBuild - Maven 
    Unit Test - JUnit NUnit
    Packaging - 
            SYSTEM
            APP 
    Repo - NEXUS - ARTIFACTORY - nuget
    --------------------------------
    QA - MicroX56.7 -- 100 SERVER
               50 LIN - 50 WIN
               50 APACH - 50 NG
               25 TOM - 25 JBOS - 25 IIS - 25 WL
               25 mYSQL - 25 MYSQL - 25 OR - 25 ps
               1000
               ----------------


    ---------------------------------
    1 DEP - 9 mins
    100 DEP - 9 mins? ==== 
    -----------------------
    HOW?
    Parrel Dep -----> Ansible - Puppet - Chef - Salt - cfEngine
    -------------------------------------------------------
    Easy to learn - share - extend - debug - test 
            Compare to 
                        JAVA - pYTHON - C++  - PERl - RUBY
    bash ---> WINDOWS?????????
    BATCh ----> lINUX?
    -----------------------------
            WE NEED PLATFORM INDEPENDENT ---ANSIBLE
    ================
    IDEOMPOTENT
    =====================
    DESIRE == ACTUAL --- NO CHANGE
    DESIRE NO== ACTUAL --- CHANGE
    ---------------------------------------
    10 Steps ---> 10 Steps --- 10 mins
    2 Step ------> 2 Step --> 2 mins
===========================================================================
Business Benefits
=====================
Cost Reduction
Automation
Consitency change management
Transparency 
Documentation of Servers
============================
https://www.devopsschool.com/path
=======================================================
Architecute of Ansible?
================================
Ansible Control Server(ACS)                 
Ansible Remote Server(ARS)

ACS                                         ARS
    LINUX                                   ANY
    64 bit                                  ANY
                    ---WINDOWS-----         WINRM (HTTP)
                    ---LINUX------          SSH 

PYTHON 2.7          ---LINUX------          PYTHON 2.4+                 
                    ---WINDOWS----          PS 3.0 + DOTNET4 

    ------------------------------------------------
        PYTHON 2.X IS NOT AN UPGRADE TO PYTHON 3.X

1. Ansible
    2. Modules
3. Playbook
------------
Already defined

4. Hosts AKA inventory
==========================
    It is LIST OF IP ADDRESS OF ARS(S)
                COMMAND LINE
                INSIDE A FILE - INI FORMAT
                    CAN HAVE GOURP
                A DIRECTORY
                SCRIPT
5. config file = /etc/ansible/ansible.cfg
    


What is Modules?
    ONE UNIT OF WORK IS CALLED MODULE..SUCH AS 
        Each module require PARAMTERETS
==============================================================
Roles in Ansible?
=============================
Developer
Administrator
OR
BOTH

How to become Java Programmer?
======================================================
JDK -> .JAVA            -> .Class ---> .jar ---> war
        variables
        conditionging
        loops
        functions
        Class
        Interface

Compiled Lang --->  inpret -->  Domain Specific Lang using Decalaration Lang
Java                pYTHON                                  yaml-json

How to become Ansible Programmer?
======================================================
Ansible -> .yaml            -> YAML(S) ---> roles
        variables
        conditionging
        loops
        functions

How to write .yaml.... AKA PLAYBOOK
=======================================
What is Playbook?
    PLAY
        HOST --->   A GROUP WHICH BELONG TO INVENTORY
        TASKS
                TASK1 ------> COMING FROM MODULE with PARAMTERETS
                TASK2
                TASK3

    PLAY
        HOST
        TASKS


    PLAY
        HOST
        TASKS
===========================================================        
TRAINING FLOW
=------------------------------------------------------
	using ADHOC command 
		Do one task in ONE MACHINE(localhost)
		Do one task in ONE REMOTE MACHINE
		Do one task in MULTIPLE REMOTE MACHINES using Inventory
		Do one task in MULTIPLE REMOTE MACHINES using group in Inventory
	using Playbook(Program)
		Do Multiple tasks(Playbook) in ONE MACHINE(localhost)
		Do Multiple tasks(Playbook) in ONE REMOTE MACHINE
		Do Multiple tasks(Playbook) in MULTIPLE REMOTE MACHINE using Inventory
		Do Multiple tasks(Playbook) in MULTIPLE REMOTE MACHINE using group in Inventory
		Do Multiple tasks(Playbook) in MULTIPLE REMOTE MACHINE using group of group in Inventory
		Do Multiple tasks(Playbook) in MULTIPLE REMOTE MACHINE using environment directory Inventory 
	using Role(Program)
		Do One Role in in ONE MACHINE(localhost)
		Do Multiple Roles in ONE REMOTE MACHINE
		Do Multiple Roles in MULTIPLE REMOTE MACHINE using Inventory
		Do Multiple Roles in MULTIPLE REMOTE MACHINE using group in Inventory
		Do Multiple Roles in MULTIPLE REMOTE MACHINE using group of group in Inventory
		Do Multiple Roles in MULTIPLE REMOTE MACHINE using environment directory Inventory
=================================================================================================
13.233.144.140
ec2-user
key - rajesh-mumbai
Password - rajesh123

How to install  Ansible?
https://www.devopsschool.com/blog/how-to-install-ansible-in-centos-7-rhel-7/

$ sudo yum install wget -y
$ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm -y
$ sudo rpm -i epel-release-latest-7.noarch.rpm
$ sudo yum update -y 
$ sudo yum install ansible -y

$ systemctl stop firewalld
$ systemctl disable firewalld

  14  ansible --version
[ec2-user@ip-172-31-5-23 ~]$ ansible --version
ansible 2.9.2
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/home/ec2-user/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.5 (default, Feb 20 2018, 09:19:12) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]

=============================================================================================
Create a Project AKA What is your desire.
==================
Write a Ansible program to setup webserver.

PSSUCODE
-------------
1. install a httpd
2. Create a index.html inside /var/www/html with content "Weclome to Ansible Class"
3. Start a web server

Fina a Mdoule for each Step of Psucode?
1. install a httpd - yum
2. Create a index.html inside /var/www/html with content "Weclome to Ansible Class" - file
3. Start a web server - service

"Ansible module for"

ALL MDOULES _ 
https://docs.ansible.com/ansible/latest/modules/modules_by_category.html

Understanding a Module
======================================
Resources           ACTION(state)                      PROPERTIES(Parameters)                  MODULE
---------------------------------------------------------------------
file                C D E
directory           C D E
service             S S E D 
package             I U
user                A D E
group               A D E
bash                exec command..- script
============================================================================


ansible localhost -m yum -a"name=httpd state=installed"


ansible command has been divided into 3 PARTS
================================================
OPTIONS
---------------------
optional arguments:
  --ask-vault-pass      ask for vault password
  --list-hosts          outputs a list of matching hosts; does not execute
                        anything else
  --playbook-dir BASEDIR
                        Since this tool does not use playbooks, use this as a
                        substitute playbook directory.This sets the relative
                        path for many features including roles/ group_vars/
                        etc.
  --syntax-check        perform a syntax check on the playbook, but do not
                        execute it
  --vault-id VAULT_IDS  the vault identity to use
  --vault-password-file VAULT_PASSWORD_FILES
                        vault password file
  --version             show program's version number, config file location,
                        configured module search path, module location,
                        executable location and exit
  -B SECONDS, --background SECONDS
                        run asynchronously, failing after X seconds
                        (default=N/A)
  -C, --check           don't make any changes; instead, try to predict some
                        of the changes that may occur
  -D, --diff            when changing (small) files and templates, show the
                        differences in those files; works great with --check
  -M MODULE_PATH, --module-path MODULE_PATH
                        prepend colon-separated path(s) to module library (def
                        ault=~/.ansible/plugins/modules:/usr/share/ansible/plu
                        gins/modules)
  -P POLL_INTERVAL, --poll POLL_INTERVAL
                        set the poll interval if using -B (default=15)
  -a MODULE_ARGS, --args MODULE_ARGS
                        module arguments
  -e EXTRA_VARS, --extra-vars EXTRA_VARS
                        set additional variables as key=value or YAML/JSON, if
                        filename prepend with @
  -f FORKS, --forks FORKS
                        specify number of parallel processes to use
                        (default=5)
  -h, --help            show this help message and exit
  -i INVENTORY, --inventory INVENTORY, --inventory-file INVENTORY
                        specify inventory host path or comma separated host
                        list. --inventory-file is deprecated
  -l SUBSET, --limit SUBSET
                        further limit selected hosts to an additional pattern
  -m MODULE_NAME, --module-name MODULE_NAME
                        module name to execute (default=command)
  -o, --one-line        condense output
  -t TREE, --tree TREE  log output to this directory
  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable
                        connection debugging)



Connection OPTIONS
----------------------------------
  control as whom and how to connect to hosts

  --private-key PRIVATE_KEY_FILE, --key-file PRIVATE_KEY_FILE
                        use this file to authenticate the connection
  --scp-extra-args SCP_EXTRA_ARGS
                        specify extra arguments to pass to scp only (e.g. -l)
  --sftp-extra-args SFTP_EXTRA_ARGS
                        specify extra arguments to pass to sftp only (e.g. -f,
                        -l)
  --ssh-common-args SSH_COMMON_ARGS
                        specify common arguments to pass to sftp/scp/ssh (e.g.
                        ProxyCommand)
  --ssh-extra-args SSH_EXTRA_ARGS
                        specify extra arguments to pass to ssh only (e.g. -R)
  -T TIMEOUT, --timeout TIMEOUT
                        override the connection timeout in seconds
                        (default=10)
  -c CONNECTION, --connection CONNECTION
                        connection type to use (default=smart)
  -k, --ask-pass        ask for connection password
  -u REMOTE_USER, --user REMOTE_USER
                        connect as this user (default=None)


Privilege Escalation Options:
------------------------------------------------------
  control how and which user you become as on target hosts

  --become-method BECOME_METHOD
                        privilege escalation method to use (default=sudo), use
                        `ansible-doc -t become -l` to list valid choices.
  --become-user BECOME_USER
                        run operations as this user (default=root)
  -K, --ask-become-pass
                        ask for privilege escalation password
  -b, --become          run operations with become (does not imply password
                        prompting)


ansible localhost -m yum -a"name=httpd state=installed" -b


Fina a Mdoule for each Step of Psucode?
1. install a httpd - yum
ansible localhost -m yum -a"name=httpd state=installed" -b

2. Create a index.html inside /var/www/html with content "Weclome to Ansible Class" - file
ansible localhost -m file -a"path=/var/www/html/index.html state=touch" -b

3. Start a web server - service
ansible localhost -m service -a"name=httpd state=started" -b

Please fill this From
http://bit.ly/3aA2LBv


Repo Link
http://bit.ly/2RGkyyl

Lab 1
=================
https://www.devopsschool.com/blog/ansible-adhoc-commands-lab-excercise-part-1/


IP  - 13.232.4.11
User Name - ec2-user
Key - rajesh-mumbai.pem


ansible localhost -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible localhost -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible localhost -m service -a"name=httpd state=started" -b -u ec2-user --key-file=rajesh-mumbai.pem


ansible 13.232.4.11 -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem

group   
    group of hosts of inventory.
    Default group       
                all
                ungroup

ansible all -i  13.232.4.11, -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible all -i  13.232.4.11, -m service -a"name=httpd state=started" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible all -i  13.232.4.11, -m copy -a"dest=/var/www/html/ src=index.html" -b -u ec2-user --key-file=rajesh-mumbai.pem


ansible all -i  13.232.4.11,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6,4.5.5.5,4.4.4.4,5.6.6.6, -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem

Inventory - file
===========================
it INI FORMAT
it has hosts ip address sep by new line.
it has custome group
-----------------
it has group of group
it has varrables
it has BEHAVIOURAL Parameters

---------------------------
13.232.4.11
13.233.144.140



ansible all -i  inventory -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible all -i  inventory -m service -a"name=httpd state=started" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible all -i  inventory -m copy -a"dest=/var/www/html/ src=index.html" -b -u ec2-user --key-file=rajesh-mumbai.pem


ansible all -i  inventory.txt -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem

invent_group
---------------------------
[web]
13.232.4.11

[db]
13.233.144.140
server1
server2
server3

[app]
ddb1
db2
db3

ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem



ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pemansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pemansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pemansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem

ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem
ansible db,web -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem

=============================================================================================

it has group of group
it has BEHAVIOURAL Parameters


invent_group_ofgroup
---------------------------
[web]
13.232.4.11

[db]
13.233.144.140

[xys]
server1
server2
server3

[app]
ddb1
db2
db3

[dev:children]
web
db

ansible dev -i invent_group -m yum -a"name=httpd state=installed" -b -u ec2-user --key-file=rajesh-mumbai.pem

https://docs.ansible.com/ansible/latest/intro_inventory.html
https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#connecting-to-hosts-behavioral-inventory-parameters

invent_group_ofgroup
---------------------------
[web]
13.232.4.11 ansible_user=ec2-user ansible_ssh_private_key_file=rajesh-mumbai.pem ansible_become=yes

[db]
13.233.144.140 ansible_user=ec2-user ansible_ssh_private_key_file=rajesh-mumbai.pem ansible_become=yes

[xys]
server1
server2
server3

[app]
ddb1
db2
db3

[dev:children]
web
db

ansible dev -i invent_group -m yum -a"name=httpd state=installed"
